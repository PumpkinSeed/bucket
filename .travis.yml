# use the latest ubuntu environment (18.04) available on travis
dist: xenial

language: go

sudo: required

services:
  - docker

# Force-enable Go modules. Also force go to use the code in vendor/
# These will both be unnecessary when Go 1.13 lands.
env:
  - GO111MODULE=on
  - GOFLAGS='-mod vendor'
  - DOCKER_COMPOSE_VERSION=1.23.2

# You don't need to test on very old versions of the Go compiler. It's the user's
# responsibility to keep their compiler up to date.
go:
  - 1.12.x

# Only clone the most recent commit.
git:
  depth: 1

# Don't email me the results of the test runs.
notifications:
  email: false

before_install:
  - sudo rm /usr/local/bin/docker-compose
  - curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose
  - chmod +x docker-compose
  - sudo mv docker-compose /usr/local/bin

# Anything in before_script that returns a nonzero exit code will flunk the
# build and immediately stop. It's sorta like having set -e enabled in bash.
# Make sure golangci-lint is vendored.
before_script:
  - go install github.com/golangci/golangci-lint/cmd/golangci-lint
  - - docker-compose -f test/docker-compose.yml up -d

# script always runs to completion (set +e). If we have linter issues AND a
# failing test, we want to see both. Configure golangci-lint with a
# .golangci.yml file at the top level of your repo.
script:
  - golangci-lint run       # run a bunch of code checkers/linters in parallel
  - go get
  - go test -v -race ./...  # Run all the tests with the race detector enabled

after_script:
  - docker-compose down